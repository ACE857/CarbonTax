"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _delaunator = _interopRequireDefault(require("delaunator/delaunator.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// From https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js
function pointX(p) {
  return p[0];
}

function pointY(p) {
  return p[1];
} // eslint-disable-next-line max-params


function flatArray(points, fx, fy, that) {
  var n = points.length;
  var array = new Float64Array(n * 2);

  for (var i = 0; i < n; ++i) {
    var p = points[i];
    array[i * 2] = fx.call(that, p, i, points);
    array[i * 2 + 1] = fy.call(that, p, i, points);
  }

  return array;
}

var Delaunay =
/*#__PURE__*/
function () {
  // eslint-disable-next-line max-statements
  function Delaunay(points) {
    var _ref = new _delaunator["default"](points),
        halfedges = _ref.halfedges,
        hull = _ref.hull,
        triangles = _ref.triangles;

    this.points = points;
    this.halfedges = halfedges;
    this.hull = hull;
    this.triangles = triangles;
    var inedges = this.inedges = new Int32Array(points.length / 2).fill(-1);
    var outedges = this.outedges = new Int32Array(points.length / 2).fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge.

    for (var e = 0, n = halfedges.length; e < n; ++e) {
      inedges[triangles[e % 3 === 2 ? e - 2 : e + 1]] = e;
    } // For points on the hull, index both the incoming and outgoing halfedges.


    var node0 = hull;
    var node1 = hull;

    do {
      node0 = node1;
      node1 = node1.next;
      inedges[node1.i] = node0.t;
      outedges[node0.i] = node1.t;
    } while (node1 !== hull);
  }

  var _proto = Delaunay.prototype;

  _proto.neighbors = function neighbors(i) {
    var results = [];
    var inedges = this.inedges,
        outedges = this.outedges,
        halfedges = this.halfedges,
        triangles = this.triangles;
    var e0 = inedges[i];
    if (e0 === -1) return results; // coincident point

    var e = e0;

    do {
      results.push(triangles[e]);
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) break; // bad triangulation

      e = halfedges[e];

      if (e === -1) {
        results.push(triangles[outedges[i]]);
        break;
      }
    } while (e !== e0);

    return results;
  };

  _proto.find = function find(x, y, i) {
    if (i === void 0) {
      i = 0;
    }

    // eslint-disable-next-line no-self-compare
    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
    var i0 = i;
    var c;

    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) {
      i = c;
    }

    return c;
  };

  _proto._step = function _step(i, x, y) {
    var inedges = this.inedges,
        points = this.points;
    if (inedges[i] === -1) return (i + 1) % (points.length >> 1);
    var c = i;
    var dc = Math.pow(x - points[i * 2], 2) + Math.pow(y - points[i * 2 + 1], 2);

    for (var _iterator = this.neighbors(i), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref2 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref2 = _i.value;
      }

      var t = _ref2;
      var dt = Math.pow(x - points[t * 2], 2) + Math.pow(y - points[t * 2 + 1], 2);

      if (dt < dc) {
        dc = dt;
        c = t;
      }
    }

    return c;
  };

  return Delaunay;
}(); // eslint-disable-next-line max-params


exports["default"] = Delaunay;

Delaunay.from = function (points, fx, fy, that) {
  if (fx === void 0) {
    fx = pointX;
  }

  if (fy === void 0) {
    fy = pointY;
  }

  return new Delaunay(flatArray(points, fx, fy, that));
}; // only public methods will be .from and .find